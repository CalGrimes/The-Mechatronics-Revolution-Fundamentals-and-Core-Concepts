/******************************************************************************
 * The Mechatronics Revolution: Fundamentals and Core Concepts
 * Code Template for Lab Assignment 4
 *
 * Note: Create a new project as described in Lab Assignment 1.
 * After including the DriverLib library in your project settings,
 * you can use this template to design your program for Lab Assignment 4. 
 *
 * This template follows the steps described in the Software Architecture
 * section (Section 4.6) of the Lab Assignment 4 document.
*******************************************************************************/

/* Include header files */
#include "driverlib.h"
#include "mechrev.h"
#include <stdint.h>
#include <stdbool.h>

/* Define macros and function prototypes if needed */

/* Define configuration structs if needed */
//------------

Timer_A_PWMConfig pwmConfig1 =
{
TIMER_A_CLOCKSOURCE_SMCLK, // tie Timer A to SMCLK
TIMER_A_CLOCKSOURCE_DIVIDER_1, //No divider we'll use DCOfreq 3.0MHz--> period=1/3.0MHz=0.33us
10000, //Our period=3.3ms; clock period ticks=3.3ms/0.33us=10000 clock ticks
TIMER_A_CAPTURECOMPARE_REGISTER_1, //CCR1 location register of TA0.1,P2.4-->1A---->LM
TIMER_A_OUTPUTMODE_RESET_SET, // Module 7 functionality (PWM signal)
3300 // Set duty cycle to 33%; 0.33*10000=3300
};

Timer_A_PWMConfig pwmConfig2 =
{
TIMER_A_CLOCKSOURCE_SMCLK,
TIMER_A_CLOCKSOURCE_DIVIDER_1,
10000,
TIMER_A_CAPTURECOMPARE_REGISTER_2, //CCR2 location register of TA0.2,P2.5-->2A-----&RM
TIMER_A_OUTPUTMODE_RESET_SET,
3300
};
Timer_A_PWMConfig pwmConfig3 =
{
TIMER_A_CLOCKSOURCE_SMCLK,
TIMER_A_CLOCKSOURCE_DIVIDER_1,
10000,
TIMER_A_CAPTURECOMPARE_REGISTER_3, //CCR3 location register of TA0.3,P2.6-->3A-----&RM
TIMER_A_OUTPUTMODE_RESET_SET,
3300
};
Timer_A_PWMConfig pwmConfig4 =
{
TIMER_A_CLOCKSOURCE_SMCLK,
TIMER_A_CLOCKSOURCE_DIVIDER_1,
10000,
TIMER_A_CAPTURECOMPARE_REGISTER_4, //CCR4 location register of TA0.4,P2.7-->4A--->LM
TIMER_A_OUTPUTMODE_RESET_SET,
3300
};
/* Declare global variables if needed */
/* GPIO & Port initialization function */
void init () {
MAP_GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN1|GPIO_PIN4);//Set S1 & S2 as input pull-up resistors
// For Lab4: it is easier to use Polling instead of interrupts to monitor S1 & S2 Buttons

/* Set GPIO Port 1.6: Enable 1,2EN of SN754410 Quadruple Half-H Driver:Right Motor as output pin */
MAP_GPIO_setAsOutputPin(GPIO_PORT_P1,GPIO_PIN6);

/* Set GPIO Port 1.6:Enable 1,2EN of SN754410:Right Motor as output LOW to be turned on by isr */
MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN6);

/* Set GPIO Port 1.7: Enable 3,4EN of SN754410 Quadruple Half-H Driver:Left Motor as output pin */
MAP_GPIO_setAsOutputPin(GPIO_PORT_P1,GPIO_PIN7);

/* Set GPIO Port 1.7:Enable 3,4EN of SN754410:Left Motor as output LOW to be turned on by isr */
MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN7);


}

/* Main program */
void main(void)
{
    /* Stop Watchdog Timer */
    WDT_A_holdTimer();

    /* Call the mechrev_setup function included in the mechrev.h header file */
    mechrev_setup();

    /* Initialize GPIOs P1.1 and P1.4 for PushButtons (S1 and S2 switches) */
    MAP_GPIO_setAsInputPinWithPullUpResistor(BTN1_PIN);
    MAP_GPIO_setAsInputPinWithPullUpResistor(BTN2_PIN);
    /* Initialize GPIOs P1.6 and P1.7 for Motor Driver IC Enable Pins */
    MAP_GPIO_setOutputHighOnPin(MOTORR);
    MAP_GPIO_setOutputOnPin(MOTORL);
    /* Initialize GPIOs P2.4, P2.5, P2.6 and P2.7 for PWM functionality  */

    /* Initialize Timer A0 to generate PWM signals */

    /* Declare local variables if needed */

    /* Call the initialization grading macro */
    MACRO_LAB4_INIT();

    while(1)
    {
        /* Design a Polling process to detect PushButtons press and adjust the PWM duty cycles accordingly */

            /* Note: Call the event grading macro after changing PWMs */
            MACRO_LAB4_EVENT();
    }
}
