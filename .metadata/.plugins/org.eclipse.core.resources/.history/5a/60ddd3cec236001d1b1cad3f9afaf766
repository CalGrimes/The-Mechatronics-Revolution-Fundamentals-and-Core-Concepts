/******************************************************************************
 * The Mechatronics Revolution: Fundamentals and Core Concepts
 * Code Template for Lab Assignment 4
 *
 * Note: Create a new project as described in Lab Assignment 1.
 * After including the DriverLib library in your project settings,
 * you can use this template to design your program for Lab Assignment 4.
 *
 * This template follows the steps described in the Software Architecture
 * section (Section 4.6) of the Lab Assignment 4 document.
*******************************************************************************/

/* Include header files */
#include "driverlib.h"
#include "mechrev.h"
#include "macros.h"
#include <stdint.h>
#include <stdbool.h>

/* Define macros and function prototypes if needed */

/* Define configuration structs if needed */
Timer_A_PWMConfig pwmConfig =
{
 TIMER_A_CLOCKSOURCE_SMCLK,
 TIMER_A_CLOCKSOURCE_DIVIDER_1,10000,
 TIMER_A_CAPTURECOMPARE_REGISTER_1,
 TIMER_A_OUTPUTMODE_RESET_SET,3300
};

/* Declare global variables if needed */

void lab4_Initialize(void);
/* Main program */
void main(void)
{
    /* Stop Watchdog Timer */
    WDT_A_holdTimer();

    /* Call the mechrev_setup function included in the mechrev.h header file */
    mechrev_setup();

//    MAP_CS_setDCOFrequency(3000000); //set DCO clock source frequency
//
//    MAP_CS_initClockSignal(CS_SMCLK,CS_DCOCLK_SELECT,CS_CLOCK_DIVIDER_1);


    /* Initialize GPIOs P1.1 and P1.4 for PushButtons (S1 and S2 switches) */

    /* Initialize GPIOs P1.6 and P1.7 for Motor Driver IC Enable Pins */

    /* Initialize GPIOs P2.4, P2.5, P2.6 and P2.7 for PWM functionality  */
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P2, GPIO_PIN4|GPIO_PIN5|GPIO_PIN6| GPIO_PIN7,
    GPIO_PRIMARY_MODULE_FUNCTION);
    /* Initialize Timer A0 to generate PWM signals */
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P7, GPIO_PIN3,GPIO_PRIMARY_MODULE_FUNCTION);
    Timer_A_generatePWM(TIMER_A0_BASE, &pwmConfig);
    /* Declare local variables if needed */


    /* Call the initialization grading macro */
    lab4_Initialize();
    MACRO_LAB4_INIT();

    while(1)
    {
        TA0CCR1 = 1500; // set duty cycle for TA0.1 (P2.4) to 50%
        TA0CCR2 = 0; // set duty cycle for TA0.2 (P2.5) to 0%
        TA0CCR3 = 1500; // set duty cycle for TA0.3 (P2.6) to 50%
        TA0CCR4 = 0; // set duty cycle for TA0.4 (P2.7) to 0%

        /* Design a Polling process to detect PushButtons press and adjust the PWM duty cycles accordingly */
        if (MAP_GPIO_getInputPinValue(BTN1_PIN) == GPIO_INPUT_PIN_LOW)
        {
            MAP_GPIO_setOutputHighOnPin(LED1_PIN);
            MAP_GPIO_setOutputHighOnPin(A01);
            MAP_GPIO_setOutputLowOnPin(A02);
            printf("S1 clicked\n");



        }
        else if (MAP_GPIO_getInputPinValue(BTN2_PIN) == GPIO_INPUT_PIN_LOW)
        {
            MAP_GPIO_setOutputHighOnPin(LED1_PIN);
            printf("S2 clicked\n");
        }
        else {
            MAP_GPIO_setOutputLowOnPin(LED1_PIN);
            MAP_GPIO_setOutputLowOnPin(MOTORR);
            MAP_GPIO_setOutputLowOnPin(MOTORL);
        }

            /* Note: Call the event grading macro after changing PWMs */
//            MACRO_LAB4_EVENT();
    }
}

void lab4_Initialize(void)
{
    MAP_GPIO_setAsOutputPin(LED1_PIN);
    MAP_GPIO_setOutputLowOnPin(LED1_PIN);

    MAP_GPIO_setAsInputPinWithPullUpResistor(BTN1_PIN);
    MAP_GPIO_setAsInputPinWithPullUpResistor(BTN2_PIN);

    GPIO_setAsOutputPin(MOTORR);
    GPIO_setAsOutputPin(MOTORL);
    MAP_GPIO_setOutputHighOnPin(MOTORR);
    MAP_GPIO_setOutputHighOnPin(MOTORL);

//    GPIO_setInputWithPullUpResistor(A01);
//    GPIO_setInputWithPullUpResistor(A02);
//    GPIO_setInputWithPullUpResistor(A03);
//    GPIO_setInputWithPullUpResistor(A04);

}
